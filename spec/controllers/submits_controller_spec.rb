# coding:utf-8
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SubmitsController do

  # This should return the minimal set of attributes required to create a valid
  # Submit. As you add validations to Submit, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SubmitsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET new" do
    let!(:now){ DateTime.new(2013, 03, 01, 12, 00, 00) }
    let!(:after_1h){ now + 1.hours }
    let!(:after_2h){ now + 2.hours }

    it "submitの作成に期限がある" do
      judge = create :judge, judge_time: after_1h, remove_time: after_2h

      DateTime.stub!(:now).and_return(now)
      get :new, {:judge_id => judge.id}, valid_session
      assigns(:submit).should be_a_new(Submit)
      response.should render_template("new")

      DateTime.stub!(:now).and_return(after_1h)
      get :new, {:judge_id => judge.id}, valid_session
      response.should render_template("submits/deadline")

      DateTime.stub!(:now).and_return(after_2h)
      get :new, {:judge_id => judge.id}, valid_session
      response.status.should == 404

      id = judge.id
      judge.destroy
      DateTime.stub!(:now).and_return(now)
      get :new, {:judge_id => id}, valid_session
      response.status.should == 404
    end
  end

  describe "POST create" do
    let!(:now){ DateTime.new(2013, 03, 01, 12, 00, 00) }
    let!(:after_1h){ now + 1.hours }
    let!(:after_2h){ now + 2.hours }

    it "submitの作成に期限がある(表示系)" do
      judge = create :judge, judge_time: after_1h, remove_time: after_2h
      select_item = SelectItem.create title: "Title", judge: judge

      DateTime.stub!(:now).and_return(now)
      post :create, {:judge_id => judge.id, :submit => {:select_item => select_item, :select_item_etc => ""}}, valid_session
      assigns(:submit).should eq(Submit.last)
      response.should render_template("create")

      DateTime.stub!(:now).and_return(after_1h)
      post :create, {:judge_id => judge.id, :submit => {:select_item => select_item, :select_item_etc => ""}}, valid_session
      response.should render_template("submits/deadline")

      DateTime.stub!(:now).and_return(after_2h)
      post :create, {:judge_id => judge.id, :submit => {:select_item => select_item, :select_item_etc => ""}}, valid_session
      response.status.should == 404

      id = judge.id
      judge.destroy
      DateTime.stub!(:now).and_return(now)
      post :create, {:judge_id => id, :submit => {:select_item => select_item, :select_item_etc => ""}}, valid_session
      response.status.should == 404
    end

    it "submitの作成に期限がある(作成系)" do
      judge = create :judge, judge_time: after_1h, remove_time: after_2h
      select_item = SelectItem.create title: "Title", judge: judge

      DateTime.stub!(:now).and_return(now)
      expect {
        post :create, {:judge_id => judge.id, :submit => {:select_item => select_item, :select_item_etc => ""}}, valid_session
      }.to change{ judge.submits.count }.by(1)

      DateTime.stub!(:now).and_return(after_1h)
      expect {
        post :create, {:judge_id => judge.id, :submit => {:select_item => select_item, :select_item_etc => ""}}, valid_session
      }.to_not change{ judge.submits.count }

      DateTime.stub!(:now).and_return(after_2h)
      expect {
        post :create, {:judge_id => judge.id, :submit => {:select_item => select_item, :select_item_etc => ""}}, valid_session
      }.to_not change{ judge.submits.count }
    end
  end
end
