# coding:utf-8
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

def add_submit judge
  select_item = SelectItem.create :title => "Title"
  submit = Submit.create
  submit.select_item = select_item
  submit.save
  judge.select_items << select_item
  judge.submits << submit
end

describe JudgesController do

  # This should return the minimal set of attributes required to create a valid
  # Judge. As you add validations to Judge, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { "title" => "MyString", "judge_type" => 0, "select_type" => 0 }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # JudgesController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET show" do
    let!(:now){ DateTime.new(2013, 03, 01, 12, 00, 00) }
    let!(:after_1h){ now + 1.hours }
    let!(:after_2h){ now + 2.hours }

    it "結果画面で結果待ち画面と結果画面が切り替わる" do
      judge = create :judge, judge_time: after_1h, remove_time: after_2h

      DateTime.stub(:now).and_return(now)
      get :show, {:id => judge.id}, valid_session
      response.should render_template("judges/wait")

      DateTime.stub(:now).and_return(after_1h)
      get :show, {:id => judge.id}, valid_session
      response.should render_template("no_submit")

      DateTime.stub(:now).and_return(after_1h)
      add_submit(judge)
      get :show, {:id => judge.id}, valid_session
      response.should render_template("show")

      DateTime.stub(:now).and_return(after_2h)
      get :show, {:id => judge.id}, valid_session
      response.status.should == 404

      id = judge.id
      judge.destroy
      DateTime.stub(:now).and_return(now)
      get :show, {:id => id}, valid_session
      response.status.should == 404
    end
  end

  describe "GET new" do
    it "assigns a new judge as @judge" do
      get :new, {}, valid_session
      assigns(:judge).should be_a_new(Judge)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Judge" do
        expect {
          post :create, {:judge => valid_attributes}, valid_session
        }.to change(Judge, :count).by(1)
      end

      it "assigns a newly created judge as @judge" do
        post :create, {:judge => valid_attributes}, valid_session
        assigns(:judge).should be_a(Judge)
        assigns(:judge).should be_persisted
      end

      it "redirects to the created judge" do
        post :create, {:judge => valid_attributes}, valid_session
        response.should_not redirect_to(Judge.last)
        response.should render_template(:create)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved judge as @judge" do
        # Trigger the behavior that occurs when invalid params are submitted
        Judge.any_instance.stub(:save).and_return(false)
        post :create, {:judge => { "title" => "invalid value" }}, valid_session
        assigns(:judge).should be_a_new(Judge)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Judge.any_instance.stub(:save).and_return(false)
        post :create, {:judge => { "title" => "invalid value" }}, valid_session
        response.should render_template("new")
      end
    end
  end
end
